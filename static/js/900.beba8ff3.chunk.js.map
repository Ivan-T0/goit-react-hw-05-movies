{"version":3,"file":"static/js/900.beba8ff3.chunk.js","mappings":"6OACA,EAAwB,oBAAxB,EAAoD,oB,SC6CpD,EA1Ca,WACP,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACIC,GAASC,EAAAA,EAAAA,MA0Bf,OAvBFC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,+GAEQC,MAAM,sCAAD,OACYJ,EAAOK,MADnB,2BAExB,CACIC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,gOARZ,cAETC,EAFS,gBAYIA,EAASC,OAZb,OAYTC,EAZS,OAabb,EAAUa,EAAKC,MACXC,QAAQC,IAAIH,GAdH,kDAgBfE,QAAQE,MAAR,MAhBe,0DAAH,qDAoBhBb,GACD,GAAE,CAACH,EAAOK,SAET,0BACE,eAAIY,UAAWC,EAAf,SACGpB,EAAOqB,KAAI,SAAAC,GAAK,OACb,2BACI,gBAAKH,UAAWC,EAAYG,IAAG,yCAAoCD,EAAME,cAAgBC,IAAKzB,EAAO0B,KAAMC,MAAM,MAAMC,OAAO,SAC9H,uBAAIN,EAAMI,QACV,wCAAgBJ,EAAMO,eAHjBP,EAAMQ,GADF,OAUxB,C,sBC7CD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOtB,GAEP,YADAgB,EAAOhB,EAET,CAEIqB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOG,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"image\":\"Cast_image__mOsuM\",\"actor\":\"Cast_actor__tWtXy\"};","import { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\";\nimport cl from './Cast.module.css'\n\nconst Cast = () => {\n      const [actors, setActors] = useState([]);\n    const params = useParams();\n    \n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const responce = await fetch(\n          `https://api.themoviedb.org/3/movie/${params.movId}/credits?language=en-US`,\n            {\n                method: 'GET',\n                headers: {\n                    accept: 'application/json',\n                    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjNDI5ZWRlNzFmOTUxYjJhNDQ1ODk4NTZmNzA4MTgwZSIsInN1YiI6IjY0ZWNhNDUzYzNjODkxMDEzYWIzNjlkZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.GQWCKvaWhnfo33nlqLxHjJ-bsZwjantxUmAW2OYqnv0'\n                }\n            }\n        );\n        const data = await responce.json();\n          setActors(data.cast);\n              console.log(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchMovie();\n  }, [params.movId]);\n    return (\n    <div>\n      <ul className={cl.actor}>\n        {actors.map(actor => (\n            <li key={actor.id}>\n                <img className={cl.image}   src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`} alt={actors.name} width='200' height='150'  />\n                <p>{actor.name}</p>\n                <p>Character : {actor.character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\nexport default Cast","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","actors","setActors","params","useParams","useEffect","fetchMovie","fetch","movId","method","headers","accept","Authorization","responce","json","data","cast","console","log","error","className","cl","map","actor","src","profile_path","alt","name","width","height","character","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}